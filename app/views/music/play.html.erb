<div class="container mx-auto px-4 py-8">
  <div class="max-w-2xl mx-auto">
    <div class="bg-white shadow rounded-lg p-6">
      <div class="flex items-center justify-between mb-6">
        <h1 class="text-2xl font-bold text-gray-900">瞑想音楽再生</h1>
        <%= link_to "← 音楽ライブラリに戻る", music_path,
            class: "text-blue-500 hover:text-blue-700" %>
      </div>

      <div class="mb-6">
        <h2 class="text-lg font-semibold text-gray-800 mb-2">再生中の音楽</h2>
        <p class="text-gray-600"><%= @file_name %></p>
      </div>

      <div class="mb-6 flex flex-col items-center justify-center">
        <div style="display: flex; justify-content: center; align-items: center; width: 100%;">
          <audio id="audio-player" controls style="width:40%; height:60px; transform: scale(1.25);">
            <source src="<%= music_stream_path(@file_id) %>" type="audio/mpeg">
            お使いのブラウザは音声再生をサポートしていません。
          </audio>
        </div>
      </div>

      <div class="border-t pt-6">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">瞑想記録</h3>
        
        <% if @meditation_record && @meditation_record.errors.any? %>
          <div class="mb-4 p-4 bg-red-100 text-red-700 rounded">
            <h4>エラーがあります:</h4>
            <ul>
              <% @meditation_record.errors.full_messages.each do |msg| %>
                <li><%= msg %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <%= form_with model: @meditation_record, local: true, id: "meditation-form", data: { turbo: false } do |form| %>
          <%= form.hidden_field :file_id, value: @file_id %>
          <%= form.hidden_field :file_name, value: @file_name %>
          <div class="mb-4">
            <%= form.label :duration, "瞑想時間（分）", class: "block text-sm font-medium text-gray-700 mb-2" %>
            <%= form.number_field :duration, id: "meditation-duration", 
                class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                min: 1, max: 480 %>
          </div>

          <div class="mb-4">
            <%= form.label :notes, "メモ", class: "block text-sm font-medium text-gray-700 mb-2" %>
            <%= form.text_area :notes, rows: 3,
                class: "w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500",
                placeholder: "瞑想の感想や気づきを記録してください..." %>
          </div>

          <div class="flex space-x-4">
            <%= form.submit "記録を保存", 
                class: "bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" %>
          </div>
        <% end %>
        <div class="mt-6 flex justify-center">
          <%= link_to "記録を見る", meditation_records_path, class: "bg-purple-500 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded" %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('turbo:load', function() {
  const audio = document.getElementById('audio-player');
  const meditationDuration = document.getElementById('meditation-duration');

  // 再生バーの再生時間を瞑想時間欄に自動反映
  audio.addEventListener('timeupdate', function() {
    // 再生位置（秒）を分単位で切り上げ
    const minutes = Math.ceil(audio.currentTime / 60);
    meditationDuration.value = minutes;
  });

  // 音楽再生開始時に55分後にトークンリフレッシュAPIを呼ぶ
  let refreshTimer = null;
  
  function performTokenRefresh(source) {
    console.log(`トークンリフレッシュ開始 (${source})`);
    fetch('/refresh_google_token', {
      method: 'POST',
      headers: {
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
        'Content-Type': 'application/json'
      }
    })
    .then(response => response.json())
    .then(data => {
      console.log('トークンリフレッシュレスポンス:', data);
      if (data.success) {
        console.log(`トークンリフレッシュ成功 (${source}): ${data.message}`);
        // 成功時は特に何もしない（セッションは既に更新済み）
      } else {
        console.error(`トークンリフレッシュ失敗 (${source}): ${data.message}`);
        alert(`トークンリフレッシュ失敗 (${source}): ${data.message}`);
        // 失敗時は音楽ライブラリページに戻る
        window.location.href = '/music';
      }
    })
    .catch(error => {
      console.error('トークンリフレッシュエラー:', error);
      alert('トークンリフレッシュでエラーが発生しました。再ログインが必要です。');
      window.location.href = '/music';
    });
  }
  
  audio.addEventListener('play', function() {
    if (refreshTimer) {
      clearTimeout(refreshTimer);
    }
    refreshTimer = setTimeout(function() {
      performTokenRefresh('音楽再生55分後');
    }, 55 * 60 * 1000); // 55分後
  });

  // 一時停止や終了時はタイマーをクリア
  audio.addEventListener('pause', function() {
    if (refreshTimer) {
      clearTimeout(refreshTimer);
      refreshTimer = null;
    }
  });
  audio.addEventListener('ended', function() {
    if (refreshTimer) {
      clearTimeout(refreshTimer);
      refreshTimer = null;
    }
  });

  // ブラウザを開いてから55分後にもトークンリフレッシュAPIを呼ぶ
  // デバッグ用: 開発環境では2分後にもテスト実行
  const isDebugMode = window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1';
  if (isDebugMode) {
    setTimeout(function() {
      performTokenRefresh('デバッグ用2分後テスト');
    }, 2 * 60 * 1000); // 2分後（デバッグ用）
  }
  
  setTimeout(function() {
    performTokenRefresh('ブラウザ起動55分後');
  }, 55 * 60 * 1000); // 55分後
});
</script> 